version: 2.1
orbs:
  slack: circleci/slack@4.4.4

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      backend :
        type: string
        default: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      
      frontend: 
        type: string
        default: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}


  # revert-migrations:
  #   description: Revert the last migration if successfully run in the current workflow.
  #   parameters:
  #     # Add parameter here     
  #   steps:
  #     - run:
  #         name: Revert migrations
  #         # Add when this will run
  #         command: |
  #           # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
  #           SUCCESS = 1
  #           if(( $SUCCESS==1 )); 
  #           then
  #           #  cd ~/project/backend
  #           #  npm install
  #           #  Add revert code here. You can find this in the Getting Started section.
  #             exit 1
  #           fi
            
jobs:
## Building Frontend of the apps  
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

## Adding Slack Notifications. Currently fail notification is on

      - slack/notify:
         event: fail
         template: basic_fail_1
      
      # - slack/notify:
      #    event: pass
      #    template: success_tagged_deploy_1
      
######################################################################
## Building Backend For this project

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      
      
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build  

## Adding Slack Notifications. Currently fail notification is on

      - slack/notify:
         event: fail
         template: basic_fail_1
      
      # - slack/notify:
      #    event: pass
      #    template: success_tagged_deploy_1
  
##################################################################
## Test Units

## Test Frontend

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Test the fontend
          command: |
            cd frontend
            npm install
            npm run test

## Slack notification for test 

      - slack/notify:
         event: fail
         template: basic_fail_1
  
## Test backend
  test-backend:
    docker:
      - image: circleci/node:13.8.0
      
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      
      - run: 
          name: Test the backend
          command: |
            cd backend
            npm install
            npm run test
      
      ## Slack notification for test 

      - slack/notify:
         event: fail
         template: basic_fail_1
  

      # Restore from cache
      # Your job code here

############################################################
## Auditing the codes

# Audit the frontend

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: audit the frontend code
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  
## Audit the backend

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: audit the backend code
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

## 
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:2.7.18
    steps:
      - checkout 
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople

      - run:
          name: Ensure front-end infrastructure exist 
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
             mkdir -p workspace
             aws ec2 describe-instances \
             --filters "Name=tag-value,Values=udapeople" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text > workspace/inventory.txt
             cat workspace/inventory.txt 

             
      - persist_to_workspace:
          root: workspace
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure 
      - destroy-environment 

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout 
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["63:8f:b6:00:7a:97:3a:7d:d8:fb:3c:74:db:c8:02:1e"] # You can get this ID in the section where you registered the SSH K
      # attach workspace
      - attach_workspace:
            # Must be absolute path or relative path from working_directory
            at: workspace

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
            apk add openssh-client
      - run:
          name: Configure server
          command: |
            ls -lah workspace
            cat workspace/inventory.txt >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            pwd
            cd .circleci/ansible
            pwd
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible web -i inventory.txt -m ping --ansible_user=ubuntu
      # Here's where you will add some code to rollback on failure
      - destroy-environment       

  # run-migrations:
  #   docker:
  #     # Docker image here that supports NodeJS
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Run migrations
  #         command: |
  #           # Your code here
  #           exit 1
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           # Your code here
  #           exit 1
  #    # Here's where you will add some code to rollback on failure     


workflows:
  Udacity Project 3:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - "build-backend"
      - scan-frontend:
          requires:
            - "build-frontend"
      - scan-backend:
          requires:
            - "build-backend"
      - deploy-infrastructure
      - configure-infrastructure: 
          requires:
            - "deploy-infrastructure"

      
